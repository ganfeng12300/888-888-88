#!/usr/bin/env python3
"""
üí∞ ÁúüÂÆû‰∫§ÊòìÁÆ°ÁêÜÂô®
ÁÆ°ÁêÜÁúüÂÆûÂÆûÁõò‰∫§ÊòìÊï∞ÊçÆ„ÄÅÊåÅ‰ªì„ÄÅÂéÜÂè≤ËÆ∞ÂΩï
"""

import asyncio
import ccxt
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
import json
from loguru import logger
import sqlite3
from pathlib import Path

from src.config.api_config_manager import APIConfigManager


@dataclass
class RealPosition:
    """ÁúüÂÆûÊåÅ‰ªì‰ø°ÊÅØ"""
    symbol: str
    side: str  # long/short
    size: float
    entry_price: float
    current_price: float
    unrealized_pnl: float
    realized_pnl: float
    percentage: float  # ÊåÅ‰ªìÂç†ÊØî
    leverage: float
    margin_used: float
    liquidation_price: Optional[float] = None
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class RealTrade:
    """ÁúüÂÆû‰∫§ÊòìËÆ∞ÂΩï"""
    id: str
    symbol: str
    side: str  # buy/sell
    amount: float
    price: float
    cost: float
    fee: float
    timestamp: datetime
    order_type: str = "market"
    status: str = "closed"


@dataclass
class AccountInfo:
    """Ë¥¶Êà∑‰ø°ÊÅØ"""
    total_balance: float
    available_balance: float
    used_balance: float
    total_pnl: float
    daily_pnl: float
    positions_count: int
    leverage_ratio: float
    margin_ratio: float
    currencies: Dict[str, float] = field(default_factory=dict)


class RealTradingManager:
    """ÁúüÂÆû‰∫§ÊòìÁÆ°ÁêÜÂô®"""
    
    def __init__(self, db_path: str = "data/trading.db"):
        self.db_path = db_path
        self.api_config = APIConfigManager()
        self.exchanges: Dict[str, ccxt.Exchange] = {}
        self.positions: Dict[str, RealPosition] = {}
        self.trades_history: List[RealTrade] = []
        self.account_info: Optional[AccountInfo] = None
        
        # ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
        self.init_database()
        
        logger.info("üí∞ ÁúüÂÆû‰∫§ÊòìÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê")
    
    def init_database(self) -> None:
        """ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì"""
        Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # ÂàõÂª∫ÊåÅ‰ªìË°®
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS positions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT NOT NULL,
                side TEXT NOT NULL,
                size REAL NOT NULL,
                entry_price REAL NOT NULL,
                current_price REAL NOT NULL,
                unrealized_pnl REAL NOT NULL,
                realized_pnl REAL NOT NULL,
                percentage REAL NOT NULL,
                leverage REAL NOT NULL,
                margin_used REAL NOT NULL,
                liquidation_price REAL,
                timestamp INTEGER NOT NULL,
                UNIQUE(symbol, side)
            )
        """)
        
        # ÂàõÂª∫‰∫§ÊòìÂéÜÂè≤Ë°®
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS trades (
                id TEXT PRIMARY KEY,
                symbol TEXT NOT NULL,
                side TEXT NOT NULL,
                amount REAL NOT NULL,
                price REAL NOT NULL,
                cost REAL NOT NULL,
                fee REAL NOT NULL,
                timestamp INTEGER NOT NULL,
                order_type TEXT DEFAULT 'market',
                status TEXT DEFAULT 'closed'
            )
        """)
        
        # ÂàõÂª∫Ë¥¶Êà∑‰ø°ÊÅØË°®
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS account_snapshots (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                total_balance REAL NOT NULL,
                available_balance REAL NOT NULL,
                used_balance REAL NOT NULL,
                total_pnl REAL NOT NULL,
                daily_pnl REAL NOT NULL,
                positions_count INTEGER NOT NULL,
                leverage_ratio REAL NOT NULL,
                margin_ratio REAL NOT NULL,
                currencies TEXT,
                timestamp INTEGER NOT NULL
            )
        """)
        
        conn.commit()
        conn.close()
    
    async def initialize_exchanges(self) -> bool:
        """ÂàùÂßãÂåñ‰∫§ÊòìÊâÄËøûÊé•"""
        try:
            # Ëé∑ÂèñÈÖçÁΩÆÁöÑ‰∫§ÊòìÊâÄ
            exchanges = self.api_config.list_configured_exchanges()
            
            for exchange_name in exchanges:
                config = self.api_config.get_exchange_config(exchange_name)
                if not config:
                    continue
                
                if exchange_name == "bitget":
                    exchange = ccxt.bitget({
                        'apiKey': config.api_key,
                        'secret': config.api_secret,
                        'password': config.passphrase,
                        'sandbox': config.sandbox,
                        'enableRateLimit': True,
                    })
                elif exchange_name == "binance":
                    exchange = ccxt.binance({
                        'apiKey': config.api_key,
                        'secret': config.api_secret,
                        'sandbox': config.sandbox,
                        'enableRateLimit': True,
                    })
                else:
                    continue
                
                # ÊµãËØïËøûÊé•
                try:
                    await asyncio.get_event_loop().run_in_executor(
                        None, exchange.fetch_balance
                    )
                    self.exchanges[exchange_name] = exchange
                    logger.info(f"‚úÖ {exchange_name} ËøûÊé•ÊàêÂäü")
                except Exception as e:
                    logger.error(f"‚ùå {exchange_name} ËøûÊé•Â§±Ë¥•: {e}")
            
            return len(self.exchanges) > 0
            
        except Exception as e:
            logger.error(f"‚ùå ÂàùÂßãÂåñ‰∫§ÊòìÊâÄÂ§±Ë¥•: {e}")
            return False
    
    async def fetch_account_info(self) -> Optional[AccountInfo]:
        """Ëé∑ÂèñË¥¶Êà∑‰ø°ÊÅØ"""
        try:
            if not self.exchanges:
                return None
            
            # ‰ΩøÁî®Á¨¨‰∏Ä‰∏™ÂèØÁî®ÁöÑ‰∫§ÊòìÊâÄ
            exchange_name = list(self.exchanges.keys())[0]
            exchange = self.exchanges[exchange_name]
            
            # Ëé∑Âèñ‰ΩôÈ¢ù‰ø°ÊÅØ
            balance = await asyncio.get_event_loop().run_in_executor(
                None, exchange.fetch_balance
            )
            
            total_balance = balance.get('total', {}).get('USDT', 0.0)
            free_balance = balance.get('free', {}).get('USDT', 0.0)
            used_balance = balance.get('used', {}).get('USDT', 0.0)
            
            # ËÆ°ÁÆóÊåÅ‰ªìÁõ∏ÂÖ≥Êï∞ÊçÆ
            positions_count = len(self.positions)
            total_pnl = sum(pos.unrealized_pnl + pos.realized_pnl for pos in self.positions.values())
            
            # ËÆ°ÁÆóÊù†ÊùÜÊØîÁéá
            leverage_ratio = used_balance / total_balance if total_balance > 0 else 0.0
            margin_ratio = used_balance / total_balance if total_balance > 0 else 0.0
            
            # Ëé∑ÂèñÊâÄÊúâÂ∏ÅÁßç‰ΩôÈ¢ù
            currencies = {}
            for currency, amounts in balance.get('total', {}).items():
                if amounts > 0:
                    currencies[currency] = amounts
            
            self.account_info = AccountInfo(
                total_balance=total_balance,
                available_balance=free_balance,
                used_balance=used_balance,
                total_pnl=total_pnl,
                daily_pnl=0.0,  # ÈúÄË¶ÅËÆ°ÁÆóÂΩìÊó•Áõà‰∫è
                positions_count=positions_count,
                leverage_ratio=leverage_ratio,
                margin_ratio=margin_ratio,
                currencies=currencies
            )
            
            # ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì
            self._save_account_snapshot()
            
            logger.info(f"üí∞ Ë¥¶Êà∑‰ø°ÊÅØÊõ¥Êñ∞: ÊÄª‰ΩôÈ¢ù ${total_balance:.2f}")
            return self.account_info
            
        except Exception as e:
            logger.error(f"‚ùå Ëé∑ÂèñË¥¶Êà∑‰ø°ÊÅØÂ§±Ë¥•: {e}")
            return None
    
    async def fetch_positions(self) -> Dict[str, RealPosition]:
        """Ëé∑ÂèñÁúüÂÆûÊåÅ‰ªì"""
        try:
            if not self.exchanges:
                return {}
            
            exchange_name = list(self.exchanges.keys())[0]
            exchange = self.exchanges[exchange_name]
            
            # Ëé∑ÂèñÊåÅ‰ªì‰ø°ÊÅØ
            positions = await asyncio.get_event_loop().run_in_executor(
                None, exchange.fetch_positions
            )
            
            self.positions.clear()
            
            for pos in positions:
                if pos['contracts'] == 0:  # Ë∑≥ËøáÁ©∫ÊåÅ‰ªì
                    continue
                
                symbol = pos['symbol']
                side = 'long' if pos['side'] == 'long' else 'short'
                size = abs(pos['contracts'])
                entry_price = pos['entryPrice'] or 0.0
                current_price = pos['markPrice'] or 0.0
                unrealized_pnl = pos['unrealizedPnl'] or 0.0
                percentage = pos['percentage'] or 0.0
                leverage = pos['leverage'] or 1.0
                margin_used = pos['initialMargin'] or 0.0
                liquidation_price = pos['liquidationPrice']
                
                real_position = RealPosition(
                    symbol=symbol,
                    side=side,
                    size=size,
                    entry_price=entry_price,
                    current_price=current_price,
                    unrealized_pnl=unrealized_pnl,
                    realized_pnl=0.0,
                    percentage=percentage,
                    leverage=leverage,
                    margin_used=margin_used,
                    liquidation_price=liquidation_price
                )
                
                self.positions[f"{symbol}_{side}"] = real_position
            
            # ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì
            self._save_positions()
            
            logger.info(f"üìä ÊåÅ‰ªì‰ø°ÊÅØÊõ¥Êñ∞: {len(self.positions)} ‰∏™ÊåÅ‰ªì")
            return self.positions
            
        except Exception as e:
            logger.error(f"‚ùå Ëé∑ÂèñÊåÅ‰ªì‰ø°ÊÅØÂ§±Ë¥•: {e}")
            return {}
    
    async def fetch_trades_history(self, days: int = 7) -> List[RealTrade]:
        """Ëé∑Âèñ‰∫§ÊòìÂéÜÂè≤"""
        try:
            if not self.exchanges:
                return []
            
            exchange_name = list(self.exchanges.keys())[0]
            exchange = self.exchanges[exchange_name]
            
            # Ëé∑ÂèñÊúÄËøëÁöÑ‰∫§ÊòìËÆ∞ÂΩï
            since = int((datetime.now() - timedelta(days=days)).timestamp() * 1000)
            
            trades = await asyncio.get_event_loop().run_in_executor(
                None, lambda: exchange.fetch_my_trades(since=since)
            )
            
            self.trades_history.clear()
            
            for trade in trades:
                real_trade = RealTrade(
                    id=trade['id'],
                    symbol=trade['symbol'],
                    side=trade['side'],
                    amount=trade['amount'],
                    price=trade['price'],
                    cost=trade['cost'],
                    fee=trade['fee']['cost'] if trade['fee'] else 0.0,
                    timestamp=datetime.fromtimestamp(trade['timestamp'] / 1000),
                    order_type=trade.get('type', 'market'),
                    status='closed'
                )
                
                self.trades_history.append(real_trade)
            
            # ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì
            self._save_trades()
            
            logger.info(f"üìà ‰∫§ÊòìÂéÜÂè≤Êõ¥Êñ∞: {len(self.trades_history)} Á¨î‰∫§Êòì")
            return self.trades_history
            
        except Exception as e:
            logger.error(f"‚ùå Ëé∑Âèñ‰∫§ÊòìÂéÜÂè≤Â§±Ë¥•: {e}")
            return []
    
    def _save_positions(self) -> None:
        """‰øùÂ≠òÊåÅ‰ªìÂà∞Êï∞ÊçÆÂ∫ì"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Ê∏ÖÁ©∫Áé∞ÊúâÊåÅ‰ªì
            cursor.execute("DELETE FROM positions")
            
            # ÊèíÂÖ•Êñ∞ÊåÅ‰ªì
            for position in self.positions.values():
                cursor.execute("""
                    INSERT INTO positions 
                    (symbol, side, size, entry_price, current_price, unrealized_pnl, 
                     realized_pnl, percentage, leverage, margin_used, liquidation_price, timestamp)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    position.symbol, position.side, position.size, position.entry_price,
                    position.current_price, position.unrealized_pnl, position.realized_pnl,
                    position.percentage, position.leverage, position.margin_used,
                    position.liquidation_price, int(position.timestamp.timestamp())
                ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå ‰øùÂ≠òÊåÅ‰ªìÂ§±Ë¥•: {e}")
    
    def _save_trades(self) -> None:
        """‰øùÂ≠ò‰∫§ÊòìÂéÜÂè≤Âà∞Êï∞ÊçÆÂ∫ì"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            for trade in self.trades_history:
                cursor.execute("""
                    INSERT OR REPLACE INTO trades 
                    (id, symbol, side, amount, price, cost, fee, timestamp, order_type, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    trade.id, trade.symbol, trade.side, trade.amount, trade.price,
                    trade.cost, trade.fee, int(trade.timestamp.timestamp()),
                    trade.order_type, trade.status
                ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå ‰øùÂ≠ò‰∫§ÊòìÂéÜÂè≤Â§±Ë¥•: {e}")
    
    def _save_account_snapshot(self) -> None:
        """‰øùÂ≠òË¥¶Êà∑Âø´ÁÖß"""
        try:
            if not self.account_info:
                return
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO account_snapshots 
                (total_balance, available_balance, used_balance, total_pnl, daily_pnl,
                 positions_count, leverage_ratio, margin_ratio, currencies, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                self.account_info.total_balance, self.account_info.available_balance,
                self.account_info.used_balance, self.account_info.total_pnl,
                self.account_info.daily_pnl, self.account_info.positions_count,
                self.account_info.leverage_ratio, self.account_info.margin_ratio,
                json.dumps(self.account_info.currencies), int(datetime.now().timestamp())
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå ‰øùÂ≠òË¥¶Êà∑Âø´ÁÖßÂ§±Ë¥•: {e}")
    
    async def update_all_data(self) -> Dict[str, Any]:
        """Êõ¥Êñ∞ÊâÄÊúâÊï∞ÊçÆ"""
        try:
            # Âπ∂ÂèëËé∑ÂèñÊâÄÊúâÊï∞ÊçÆ
            tasks = [
                self.fetch_account_info(),
                self.fetch_positions(),
                self.fetch_trades_history()
            ]
            
            account_info, positions, trades = await asyncio.gather(*tasks, return_exceptions=True)
            
            return {
                'account_info': account_info if not isinstance(account_info, Exception) else None,
                'positions': positions if not isinstance(positions, Exception) else {},
                'trades': trades if not isinstance(trades, Exception) else [],
                'update_time': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Êõ¥Êñ∞Êï∞ÊçÆÂ§±Ë¥•: {e}")
            return {}
    
    def get_trading_summary(self) -> Dict[str, Any]:
        """Ëé∑Âèñ‰∫§ÊòìÊëòË¶Å"""
        try:
            # ËÆ°ÁÆóÁªüËÆ°Êï∞ÊçÆ
            total_trades = len(self.trades_history)
            winning_trades = sum(1 for trade in self.trades_history 
                               if trade.side == 'sell' and trade.cost > 0)  # ÁÆÄÂåñÁöÑÁõàÂà©Âà§Êñ≠
            
            win_rate = winning_trades / total_trades if total_trades > 0 else 0.0
            
            total_volume = sum(trade.cost for trade in self.trades_history)
            total_fees = sum(trade.fee for trade in self.trades_history)
            
            return {
                'total_trades': total_trades,
                'winning_trades': winning_trades,
                'win_rate': win_rate,
                'total_volume': total_volume,
                'total_fees': total_fees,
                'active_positions': len(self.positions),
                'account_balance': self.account_info.total_balance if self.account_info else 0.0,
                'total_pnl': self.account_info.total_pnl if self.account_info else 0.0
            }
            
        except Exception as e:
            logger.error(f"‚ùå Ëé∑Âèñ‰∫§ÊòìÊëòË¶ÅÂ§±Ë¥•: {e}")
            return {}


# ÂÖ®Â±ÄÂÆû‰æã
_real_trading_manager = None

def get_real_trading_manager() -> RealTradingManager:
    """Ëé∑ÂèñÁúüÂÆû‰∫§ÊòìÁÆ°ÁêÜÂô®ÂÆû‰æã"""
    global _real_trading_manager
    if _real_trading_manager is None:
        _real_trading_manager = RealTradingManager()
    return _real_trading_manager


if __name__ == "__main__":
    async def test_real_trading():
        manager = RealTradingManager()
        
        # ÂàùÂßãÂåñ‰∫§ÊòìÊâÄ
        if await manager.initialize_exchanges():
            print("‚úÖ ‰∫§ÊòìÊâÄÂàùÂßãÂåñÊàêÂäü")
            
            # Êõ¥Êñ∞Êï∞ÊçÆ
            data = await manager.update_all_data()
            print(f"üìä Êï∞ÊçÆÊõ¥Êñ∞ÂÆåÊàê: {data}")
            
            # Ëé∑ÂèñÊëòË¶Å
            summary = manager.get_trading_summary()
            print(f"üìã ‰∫§ÊòìÊëòË¶Å: {summary}")
        else:
            print("‚ùå ‰∫§ÊòìÊâÄÂàùÂßãÂåñÂ§±Ë¥•")
    
    asyncio.run(test_real_trading())

