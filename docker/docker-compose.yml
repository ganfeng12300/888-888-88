# üê≥ Docker Compose Áîü‰∫ßÁ∫ßÁºñÊéíÈÖçÁΩÆ
# AIÈáèÂåñ‰∫§ÊòìÁ≥ªÁªü - ÂÆåÊï¥ÊúçÂä°Ê†àÈÉ®ÁΩ≤

version: '3.8'

# ÁΩëÁªúÈÖçÁΩÆ
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Êï∞ÊçÆÂç∑ÈÖçÁΩÆ
volumes:
  # Â∫îÁî®Êï∞ÊçÆ
  trading-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  trading-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  trading-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./config
  
  # Êï∞ÊçÆÂ∫ìÊï∞ÊçÆ
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # ÁõëÊéßÊï∞ÊçÆ
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

# ÊúçÂä°ÈÖçÁΩÆ
services:
  # ==================== Ê†∏ÂøÉÂ∫îÁî®ÊúçÂä° ====================
  
  # AIÈáèÂåñ‰∫§Êòì‰∏ªÂ∫îÁî®
  trading-app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-}
    image: ai-trading-system:${VERSION:-latest}
    container_name: trading-app
    hostname: trading-app
    restart: unless-stopped
    
    # ÁΩëÁªúÈÖçÁΩÆ
    networks:
      - trading-network
      - monitoring-network
    
    # Á´ØÂè£Êò†Â∞Ñ
    ports:
      - "8000:8000"   # ‰∏ªÂ∫îÁî®Á´ØÂè£
      - "8001:8001"   # PrometheusÊåáÊ†áÁ´ØÂè£
      - "8002:8002"   # ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÂè£
    
    # ÁéØÂ¢ÉÂèòÈáè
    environment:
      # Â∫îÁî®ÈÖçÁΩÆ
      TRADING_ENV: ${TRADING_ENV:-production}
      TRADING_LOG_LEVEL: ${TRADING_LOG_LEVEL:-INFO}
      TRADING_DEBUG: ${TRADING_DEBUG:-false}
      
      # ËµÑÊ∫êÈôêÂà∂
      TRADING_CPU_LIMIT: ${TRADING_CPU_LIMIT:-16}
      TRADING_MEMORY_LIMIT: ${TRADING_MEMORY_LIMIT:-107374182400}
      
      # Êï∞ÊçÆÂ∫ìÈÖçÁΩÆ
      DATABASE_URL: postgresql://trading:${POSTGRES_PASSWORD:-trading123}@postgres:5432/trading_db
      
      # RedisÈÖçÁΩÆ
      REDIS_URL: redis://redis:6379/0
      
      # ÁõëÊéßÈÖçÁΩÆ
      PROMETHEUS_GATEWAY_URL: http://prometheus-pushgateway:9091
      
      # ‰∫§ÊòìÈÖçÁΩÆ
      TRADING_ENABLED: ${TRADING_ENABLED:-true}
      TRADING_MAX_POSITION: ${TRADING_MAX_POSITION:-1000.0}
      TRADING_RISK_LIMIT: ${TRADING_RISK_LIMIT:-10000.0}
    
    # ËµÑÊ∫êÈôêÂà∂
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 100G
        reservations:
          cpus: '8.0'
          memory: 32G
    
    # Êï∞ÊçÆÂç∑ÊåÇËΩΩ
    volumes:
      - trading-data:/app/data
      - trading-logs:/app/logs
      - trading-config:/app/config
      - /etc/localtime:/etc/localtime:ro
    
    # ‰æùËµñÊúçÂä°
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # ÂÅ•Â∫∑Ê£ÄÊü•
    healthcheck:
      test: ["CMD", "./docker/healthcheck.sh", "quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Êó•ÂøóÈÖçÁΩÆ
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=trading-app"

  # ==================== Êï∞ÊçÆÂ∫ìÊúçÂä° ====================
  
  # PostgreSQLÊï∞ÊçÆÂ∫ì
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    hostname: postgres
    restart: unless-stopped
    
    networks:
      - trading-network
    
    ports:
      - "5432:5432"
    
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - /etc/localtime:/etc/localtime:ro
    
    # PostgreSQLÈÖçÁΩÆ‰ºòÂåñ
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
      -c maintenance_work_mem=512MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=64MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=postgres"

  # RedisÁºìÂ≠òÂíåÊ∂àÊÅØÈòüÂàó
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    hostname: redis
    restart: unless-stopped
    
    networks:
      - trading-network
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - /etc/localtime:/etc/localtime:ro
    
    command: redis-server /usr/local/etc/redis/redis.conf
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=redis"

  # ==================== ÁõëÊéßÊúçÂä° ====================
  
  # PrometheusÁõëÊéß
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    hostname: prometheus
    restart: unless-stopped
    
    networks:
      - monitoring-network
      - trading-network
    
    ports:
      - "9090:9090"
    
    volumes:
      - prometheus-data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - /etc/localtime:/etc/localtime:ro
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=prometheus"

  # Prometheus Pushgateway
  prometheus-pushgateway:
    image: prom/pushgateway:latest
    container_name: trading-pushgateway
    hostname: prometheus-pushgateway
    restart: unless-stopped
    
    networks:
      - monitoring-network
    
    ports:
      - "9091:9091"
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=pushgateway"

  # GrafanaÂèØËßÜÂåñ
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    hostname: grafana
    restart: unless-stopped
    
    networks:
      - monitoring-network
    
    ports:
      - "3000:3000"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - /etc/localtime:/etc/localtime:ro
    
    depends_on:
      - prometheus
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=grafana"

  # ==================== Êó•ÂøóÊúçÂä° ====================
  
  # ElasticsearchÊó•ÂøóÂ≠òÂÇ®
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: trading-elasticsearch
    hostname: elasticsearch
    restart: unless-stopped
    
    networks:
      - monitoring-network
    
    ports:
      - "9200:9200"
      - "9300:9300"
    
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - /etc/localtime:/etc/localtime:ro
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=elasticsearch"

  # LogstashÊó•ÂøóÂ§ÑÁêÜ
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: trading-logstash
    hostname: logstash
    restart: unless-stopped
    
    networks:
      - monitoring-network
    
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./docker/logstash/config:/usr/share/logstash/config:ro
      - trading-logs:/app/logs:ro
      - /etc/localtime:/etc/localtime:ro
    
    depends_on:
      - elasticsearch
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=logstash"

  # KibanaÊó•ÂøóÂèØËßÜÂåñ
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: trading-kibana
    hostname: kibana
    restart: unless-stopped
    
    networks:
      - monitoring-network
    
    ports:
      - "5601:5601"
    
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    
    depends_on:
      - elasticsearch
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=kibana"

  # ==================== Â∑•ÂÖ∑ÊúçÂä° ====================
  
  # NginxÂèçÂêë‰ª£ÁêÜ
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    hostname: nginx
    restart: unless-stopped
    
    networks:
      - trading-network
      - monitoring-network
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - /etc/localtime:/etc/localtime:ro
    
    depends_on:
      - trading-app
      - grafana
      - kibana
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=nginx"

  # PortainerÂÆπÂô®ÁÆ°ÁêÜ
  portainer:
    image: portainer/portainer-ce:latest
    container_name: trading-portainer
    hostname: portainer
    restart: unless-stopped
    
    networks:
      - monitoring-network
    
    ports:
      - "9000:9000"
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
      - /etc/localtime:/etc/localtime:ro
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=portainer"

# È¢ùÂ§ñÊï∞ÊçÆÂç∑
volumes:
  portainer-data:
    driver: local
