version: '3.8'

services:
  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: quant_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - quant_network

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: quant_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-quant_trading}
      POSTGRES_USER: ${POSTGRES_USER:-quant_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quant_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-quant_user} -d ${POSTGRES_DB:-quant_trading}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quant_network

  # InfluxDB时序数据库
  influxdb:
    image: influxdb:2.7-alpine
    container_name: quant_influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD:-admin123456}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-quant_trading}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-market_data}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN:-quant_trading_token_2024}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - quant_network

  # Grafana监控面板
  grafana:
    image: grafana/grafana:10.2.0
    container_name: quant_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123456}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - influxdb
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quant_network

  # 量化交易核心服务
  quant_core:
    build:
      context: .
      dockerfile: Dockerfile.core
      args:
        PYTHON_VERSION: 3.11
    container_name: quant_core
    restart: unless-stopped
    environment:
      # 数据库配置
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-quant_trading}
      POSTGRES_USER: ${POSTGRES_USER:-quant_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quant_password}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # InfluxDB配置
      INFLUX_HOST: influxdb
      INFLUX_PORT: 8086
      INFLUX_ORG: ${INFLUX_ORG:-quant_trading}
      INFLUX_BUCKET: ${INFLUX_BUCKET:-market_data}
      INFLUX_TOKEN: ${INFLUX_TOKEN:-quant_trading_token_2024}
      
      # 应用配置
      APP_ENV: production
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      
      # GPU配置
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      
      # 性能优化
      PYTHONUNBUFFERED: 1
      PYTHONOPTIMIZE: 1
      OMP_NUM_THREADS: 4
      CUDA_VISIBLE_DEVICES: 0
      
    ports:
      - "8000:8000"  # FastAPI服务
      - "8001:8001"  # WebSocket服务
      - "8002:8002"  # 监控端口
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data:/app/data
      - /dev/shm:/dev/shm  # 共享内存优化
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - quant_network
    runtime: nvidia  # GPU支持

  # Web前端服务
  quant_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 18
    container_name: quant_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8001
      NODE_ENV: production
    ports:
      - "3001:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - quant_core
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quant_network

  # 数据采集服务
  data_collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    container_name: quant_data_collector
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-quant_trading}
      POSTGRES_USER: ${POSTGRES_USER:-quant_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quant_password}
      INFLUX_HOST: influxdb
      INFLUX_PORT: 8086
      INFLUX_ORG: ${INFLUX_ORG:-quant_trading}
      INFLUX_BUCKET: ${INFLUX_BUCKET:-market_data}
      INFLUX_TOKEN: ${INFLUX_TOKEN:-quant_trading_token_2024}
      
      # 交易所API配置
      BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      OKEX_API_KEY: ${OKEX_API_KEY:-}
      OKEX_SECRET_KEY: ${OKEX_SECRET_KEY:-}
      OKEX_PASSPHRASE: ${OKEX_PASSPHRASE:-}
      
      LOG_LEVEL: INFO
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - quant_network

  # Nginx反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: quant_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - quant_core
      - quant_frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quant_network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: quant_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quant_network

  # AlertManager告警
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: quant_alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - quant_network

  # Node Exporter系统监控
  node_exporter:
    image: prom/node-exporter:v1.6.1
    container_name: quant_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - quant_network

  # cAdvisor容器监控
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: quant_cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - quant_network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  quant_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

